import _ from "lodash";
import { LicensedItem, Frame, Manufacturer } from "@/class";
import { store } from "@/hooks";
import { IRankedData } from "./GeneralInterfaces";
import { Registry } from "./old_registry";

// A runtime-generated tracker (IE not saved) for license items
// Generated by consolidating all data
export interface License {
    FrameID: string; // The frame
    Source: string; // Manufacturer
    Name: string;
    Unlocks: LicensedItem[][];
    Brew: string;
}

export function CreateLicense(frame: Frame, ctx: Registry) {
    this._frame_id = frame.ID;
    this._source = frame.Source;
    this._name = frame.Name;
    this._brew = frame.Brew || "Core";

    this._unlocks = [[], [], []];
    this.updateUnlocks();

    return {};

    let frame = store.compendium.getReferenceByIDCareful("Frames", this._frame_id);
    if (!frame) {
        return;
    }
    const items: LicensedItem[] = _.cloneDeep([
        ...store.compendium.getItemCollection("MechWeapons"),
        ...store.compendium.getItemCollection("WeaponMods"),
        ...store.compendium.getItemCollection("MechSystems"),
    ]).filter(
        (x: LicensedItem) => x.License.toUpperCase() === frame!.Name.toUpperCase()
    ) as LicensedItem[];

    this._unlocks = [
        items.filter(x => x.LicenseLevel === 1),
        items.filter(x => x.LicenseLevel === 2),
        items.filter(x => x.LicenseLevel === 3),
    ];

    // add frame unlock as the first item of LL2
    if (frame.LicenseLevel) this._unlocks[frame.LicenseLevel - 1].unshift(frame);

    export function Source(this: License): string {
        return this._source;
    }

    export function Manufacturer(this: License): Manufacturer {
        return store.compendium.getReferenceByID("Manufacturers", this._source);
    }

    export function FrameID(this: License): string {
        return this._frame_id;
    }

    export function Brew(this: License): string {
        return this._brew;
    }

    export function Unlocks(this: License): LicensedItem[][] {
        return this._unlocks;
    }

    export function UnlockByRank(this: License, rank: number): LicensedItem[] {
        return this._unlocks[rank - 1];
    }
}
